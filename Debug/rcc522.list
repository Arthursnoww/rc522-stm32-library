
rcc522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000510  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000508  08000508  00001510  2**0
                  CONTENTS
  4 .ARM          00000000  08000508  08000508  00001510  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000508  08000510  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000508  08000508  00001508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000000  08000510  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000510  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d79  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000362  00000000  00000000  000022b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00002618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000079  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010017  00000000  00000000  00002741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ec3  00000000  00000000  00012758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000548ad  00000000  00000000  0001361b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067ec8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b8  00000000  00000000  00067f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000680c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004f0 	.word	0x080004f0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004f0 	.word	0x080004f0

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <TIM3_IRQHandler>:
int TIM3Tick_TASK = 0;
int numberFlag = 0;
int pwmCicle = 0;

void TIM3_IRQHandler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF)
 80001ac:	4b09      	ldr	r3, [pc, #36]	@ (80001d4 <TIM3_IRQHandler+0x2c>)
 80001ae:	691b      	ldr	r3, [r3, #16]
 80001b0:	f003 0301 	and.w	r3, r3, #1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d008      	beq.n	80001ca <TIM3_IRQHandler+0x22>
	{
		TIM3Tick_TASK = 1;
 80001b8:	4b07      	ldr	r3, [pc, #28]	@ (80001d8 <TIM3_IRQHandler+0x30>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	601a      	str	r2, [r3, #0]
		TIM3->SR &=~TIM_SR_UIF;
 80001be:	4b05      	ldr	r3, [pc, #20]	@ (80001d4 <TIM3_IRQHandler+0x2c>)
 80001c0:	691b      	ldr	r3, [r3, #16]
 80001c2:	4a04      	ldr	r2, [pc, #16]	@ (80001d4 <TIM3_IRQHandler+0x2c>)
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	6113      	str	r3, [r2, #16]
	}
}
 80001ca:	bf00      	nop
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	40000400 	.word	0x40000400
 80001d8:	20000020 	.word	0x20000020

080001dc <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	/*Check the interrupt source*/
	if((USART1->SR & USART_SR_RXNE)) /*Received a character*/
 80001e0:	4b19      	ldr	r3, [pc, #100]	@ (8000248 <USART1_IRQHandler+0x6c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f003 0320 	and.w	r3, r3, #32
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d029      	beq.n	8000240 <USART1_IRQHandler+0x64>
	{
		/*Read data*/
		ch = USART1->DR;
 80001ec:	4b16      	ldr	r3, [pc, #88]	@ (8000248 <USART1_IRQHandler+0x6c>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b16      	ldr	r3, [pc, #88]	@ (800024c <USART1_IRQHandler+0x70>)
 80001f4:	701a      	strb	r2, [r3, #0]
		if(ch == 'D' || ch == 'd'){
 80001f6:	4b15      	ldr	r3, [pc, #84]	@ (800024c <USART1_IRQHandler+0x70>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b44      	cmp	r3, #68	@ 0x44
 80001fc:	d003      	beq.n	8000206 <USART1_IRQHandler+0x2a>
 80001fe:	4b13      	ldr	r3, [pc, #76]	@ (800024c <USART1_IRQHandler+0x70>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b64      	cmp	r3, #100	@ 0x64
 8000204:	d106      	bne.n	8000214 <USART1_IRQHandler+0x38>
			demoEN ^= 1;
 8000206:	4b12      	ldr	r3, [pc, #72]	@ (8000250 <USART1_IRQHandler+0x74>)
 8000208:	881b      	ldrh	r3, [r3, #0]
 800020a:	f083 0301 	eor.w	r3, r3, #1
 800020e:	b29a      	uxth	r2, r3
 8000210:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <USART1_IRQHandler+0x74>)
 8000212:	801a      	strh	r2, [r3, #0]
		}

		if(ch >= 48 && ch <= 57){
 8000214:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <USART1_IRQHandler+0x70>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b2f      	cmp	r3, #47	@ 0x2f
 800021a:	d911      	bls.n	8000240 <USART1_IRQHandler+0x64>
 800021c:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <USART1_IRQHandler+0x70>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b39      	cmp	r3, #57	@ 0x39
 8000222:	d80d      	bhi.n	8000240 <USART1_IRQHandler+0x64>
			numberFlag = (numberFlag + 1) % 3;
 8000224:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <USART1_IRQHandler+0x78>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	1c59      	adds	r1, r3, #1
 800022a:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <USART1_IRQHandler+0x7c>)
 800022c:	fb83 3201 	smull	r3, r2, r3, r1
 8000230:	17cb      	asrs	r3, r1, #31
 8000232:	1ad2      	subs	r2, r2, r3
 8000234:	4613      	mov	r3, r2
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	4413      	add	r3, r2
 800023a:	1aca      	subs	r2, r1, r3
 800023c:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <USART1_IRQHandler+0x78>)
 800023e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	40013800 	.word	0x40013800
 800024c:	2000001c 	.word	0x2000001c
 8000250:	2000001e 	.word	0x2000001e
 8000254:	20000024 	.word	0x20000024
 8000258:	55555556 	.word	0x55555556

0800025c <main>:
	pwmCicle += (ch % 48);
	while(ch != 13);
}

int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	gpioSetup();
 8000260:	f000 f866 	bl	8000330 <gpioSetup>

	pwmSetup();
 8000264:	f000 f82a 	bl	80002bc <pwmSetup>

	timerSetup();
 8000268:	f000 f804 	bl	8000274 <timerSetup>

	usartSetup();
 800026c:	f000 f8cc 	bl	8000408 <usartSetup>

	while(1)
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <main+0x14>

08000274 <timerSetup>:
	}
}



void timerSetup(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <timerSetup+0x40>)
 800027a:	69db      	ldr	r3, [r3, #28]
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <timerSetup+0x40>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	61d3      	str	r3, [r2, #28]

	TIM3->PSC = 8000-1; 	//8000000/8000 =1000 i.e. 1ms
 8000284:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <timerSetup+0x44>)
 8000286:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800028a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 15-1; 	    //count up to 50 which is 50 milisecond
 800028c:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <timerSetup+0x44>)
 800028e:	220e      	movs	r2, #14
 8000290:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM3->DIER |= TIM_DIER_UIE;// Enable timer2 interrupt in NVIC
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <timerSetup+0x44>)
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <timerSetup+0x44>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 800029e:	201d      	movs	r0, #29
 80002a0:	f7ff ff66 	bl	8000170 <__NVIC_EnableIRQ>

		// Enable the timer
	TIM3->CR1 |= TIM_CR1_CEN;
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <timerSetup+0x44>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a03      	ldr	r2, [pc, #12]	@ (80002b8 <timerSetup+0x44>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40021000 	.word	0x40021000
 80002b8:	40000400 	.word	0x40000400

080002bc <pwmSetup>:

void pwmSetup(){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	// Enable clock access to timer2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002c0:	4b1a      	ldr	r3, [pc, #104]	@ (800032c <pwmSetup+0x70>)
 80002c2:	69db      	ldr	r3, [r3, #28]
 80002c4:	4a19      	ldr	r2, [pc, #100]	@ (800032c <pwmSetup+0x70>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 0;
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d0:	2200      	movs	r2, #0
 80002d2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 100;
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d8:	2264      	movs	r2, #100	@ 0x64
 80002da:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR2 |= TIM_CCMR2_OC4M_2|TIM_CCMR2_OC4M_1 |
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e6:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80002ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002ee:	61d3      	str	r3, [r2, #28]
				   TIM_CCMR2_OC3M_2|TIM_CCMR2_OC3M_1 ;

	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 |TIM_CCMR1_OC2M_1;
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fa:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80002fe:	6193      	str	r3, [r2, #24]

	TIM2->CCER  |= TIM_CCER_CC4E | TIM_CCER_CC3E | TIM_CCER_CC2E;
 8000300:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000304:	6a1b      	ldr	r3, [r3, #32]
 8000306:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800030a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6213      	str	r3, [r2, #32]
	TIM2->CR1   |= TIM_CR1_CEN;
 8000314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021000 	.word	0x40021000

08000330 <gpioSetup>:

void gpioSetup(){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	/*UART1 Pin configuration*/
	//enable clock access to GPIOA
	RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 8000334:	4b22      	ldr	r3, [pc, #136]	@ (80003c0 <gpioSetup+0x90>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a21      	ldr	r2, [pc, #132]	@ (80003c0 <gpioSetup+0x90>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6193      	str	r3, [r2, #24]

	//Configure PA10(RX) as as input floating as following
	GPIOA->CRH &= 0xFFFFF0FF;
 8000340:	4b20      	ldr	r3, [pc, #128]	@ (80003c4 <gpioSetup+0x94>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a1f      	ldr	r2, [pc, #124]	@ (80003c4 <gpioSetup+0x94>)
 8000346:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800034a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000400;
 800034c:	4b1d      	ldr	r3, [pc, #116]	@ (80003c4 <gpioSetup+0x94>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a1c      	ldr	r2, [pc, #112]	@ (80003c4 <gpioSetup+0x94>)
 8000352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000356:	6053      	str	r3, [r2, #4]

	/*GPIO PB-8 configuration for DEBUG*/
	/*GPIO PB-3,10,11 for LED RGB application with PWM*/
	//enable clock access to GPIOB
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <gpioSetup+0x90>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a18      	ldr	r2, [pc, #96]	@ (80003c0 <gpioSetup+0x90>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6193      	str	r3, [r2, #24]

	GPIOB->CRH &= 0xFFFF00FF;
 8000364:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <gpioSetup+0x98>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a17      	ldr	r2, [pc, #92]	@ (80003c8 <gpioSetup+0x98>)
 800036a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800036e:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x0000BB00;
 8000370:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <gpioSetup+0x98>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a14      	ldr	r2, [pc, #80]	@ (80003c8 <gpioSetup+0x98>)
 8000376:	f443 433b 	orr.w	r3, r3, #47872	@ 0xbb00
 800037a:	6053      	str	r3, [r2, #4]

	GPIOB->CRL &= 0xFFFF0FFF;
 800037c:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <gpioSetup+0x98>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a11      	ldr	r2, [pc, #68]	@ (80003c8 <gpioSetup+0x98>)
 8000382:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000386:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x0000B000;
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <gpioSetup+0x98>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0e      	ldr	r2, [pc, #56]	@ (80003c8 <gpioSetup+0x98>)
 800038e:	f443 4330 	orr.w	r3, r3, #45056	@ 0xb000
 8000392:	6013      	str	r3, [r2, #0]

	GPIOB->ODR &= 0x00000000;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <gpioSetup+0x98>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <gpioSetup+0x98>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]


	// Set Bit 0 to enable AF clock
	RCC->APB2ENR |= (1 << 0);
 800039e:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <gpioSetup+0x90>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <gpioSetup+0x90>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6193      	str	r3, [r2, #24]
	// Use REMAP function to use PWM4 from TIM2 in B11
	//							 PWM3 from TIM2 in B10
	//							 PWM2 from TIM2 in B03
	AFIO->MAPR |= (3 << 8);
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <gpioSetup+0x9c>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	4a07      	ldr	r2, [pc, #28]	@ (80003cc <gpioSetup+0x9c>)
 80003b0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80003b4:	6053      	str	r3, [r2, #4]
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010800 	.word	0x40010800
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	40010000 	.word	0x40010000

080003d0 <__NVIC_EnableIRQ>:
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db0b      	blt.n	80003fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f003 021f 	and.w	r2, r3, #31
 80003e8:	4906      	ldr	r1, [pc, #24]	@ (8000404 <__NVIC_EnableIRQ+0x34>)
 80003ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ee:	095b      	lsrs	r3, r3, #5
 80003f0:	2001      	movs	r0, #1
 80003f2:	fa00 f202 	lsl.w	r2, r0, r2
 80003f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	e000e100 	.word	0xe000e100

08000408 <usartSetup>:
 *  Created on: Sep 22, 2024
 *      Author: guilherme
 */
#include "uart.h"

void usartSetup(){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//enable clock access to USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <usartSetup+0x44>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <usartSetup+0x44>)
 8000412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000416:	6193      	str	r3, [r2, #24]
	//Enable receiver
	USART1->CR1 |= USART_CR1_RE;
 8000418:	4b0d      	ldr	r3, [pc, #52]	@ (8000450 <usartSetup+0x48>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4a0c      	ldr	r2, [pc, #48]	@ (8000450 <usartSetup+0x48>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	60d3      	str	r3, [r2, #12]
	//Set Baud Rate
	USART1->BRR = ((CPU_CLK + (BaudRate/2U))/BaudRate);
 8000424:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <usartSetup+0x48>)
 8000426:	2245      	movs	r2, #69	@ 0x45
 8000428:	609a      	str	r2, [r3, #8]
	//Enable RXNIE interrupt
	USART1->CR1|=USART_CR1_RXNEIE;
 800042a:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <usartSetup+0x48>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	4a08      	ldr	r2, [pc, #32]	@ (8000450 <usartSetup+0x48>)
 8000430:	f043 0320 	orr.w	r3, r3, #32
 8000434:	60d3      	str	r3, [r2, #12]

	//Enable USART1 interrupt in NVIC
	NVIC_EnableIRQ(USART1_IRQn);
 8000436:	2025      	movs	r0, #37	@ 0x25
 8000438:	f7ff ffca 	bl	80003d0 <__NVIC_EnableIRQ>

	//Enable UART
	USART1->CR1 |= USART_CR1_UE;
 800043c:	4b04      	ldr	r3, [pc, #16]	@ (8000450 <usartSetup+0x48>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	4a03      	ldr	r2, [pc, #12]	@ (8000450 <usartSetup+0x48>)
 8000442:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000446:	60d3      	str	r3, [r2, #12]
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	40013800 	.word	0x40013800

08000454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000454:	480d      	ldr	r0, [pc, #52]	@ (800048c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000456:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000458:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800045c:	480c      	ldr	r0, [pc, #48]	@ (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045e:	490d      	ldr	r1, [pc, #52]	@ (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000460:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <LoopForever+0xe>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000464:	e002      	b.n	800046c <LoopCopyDataInit>

08000466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046a:	3304      	adds	r3, #4

0800046c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800046c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000470:	d3f9      	bcc.n	8000466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000472:	4a0a      	ldr	r2, [pc, #40]	@ (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000474:	4c0a      	ldr	r4, [pc, #40]	@ (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000478:	e001      	b.n	800047e <LoopFillZerobss>

0800047a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800047c:	3204      	adds	r2, #4

0800047e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000480:	d3fb      	bcc.n	800047a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000482:	f000 f811 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000486:	f7ff fee9 	bl	800025c <main>

0800048a <LoopForever>:

LoopForever:
  b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   r0, =_estack
 800048c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000498:	08000510 	.word	0x08000510
  ldr r2, =_sbss
 800049c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a0:	20000028 	.word	0x20000028

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2600      	movs	r6, #0
 80004ac:	4d0c      	ldr	r5, [pc, #48]	@ (80004e0 <__libc_init_array+0x38>)
 80004ae:	4c0d      	ldr	r4, [pc, #52]	@ (80004e4 <__libc_init_array+0x3c>)
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	42a6      	cmp	r6, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	f000 f81a 	bl	80004f0 <_init>
 80004bc:	2600      	movs	r6, #0
 80004be:	4d0a      	ldr	r5, [pc, #40]	@ (80004e8 <__libc_init_array+0x40>)
 80004c0:	4c0a      	ldr	r4, [pc, #40]	@ (80004ec <__libc_init_array+0x44>)
 80004c2:	1b64      	subs	r4, r4, r5
 80004c4:	10a4      	asrs	r4, r4, #2
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d0:	4798      	blx	r3
 80004d2:	3601      	adds	r6, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004da:	4798      	blx	r3
 80004dc:	3601      	adds	r6, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
